import Head from 'next/head';
import { useEffect, useState } from 'react';
import BottomBar from '../components/Layout/BottomBar';
import { FormComponent } from '../components/Form/FormComponent';
import { ItemsList } from '../components/ItemList/ItemsList';
import { Nav } from '../components/Layout/Nav';
import { IFormData, IItem, IItemToAdd, TItems, TState } from './types';
import { belongsToPage, returnNext, returnPrev } from './utils';
import { postRequest, putRequest } from './apiRequests';

export default function Home() {
	const [items, setItems] = useState<TItems|null>( null );
	const [page, setPage] = useState<number>( 1 );
	const [isLoading, setLoading] = useState( false );
	const [formIsDisplayed, setFormDisplayed] = useState<boolean>( false );
	const pages: TState[] = ['toBuy', 'inFridge', 'deleted'];
	console.log( 'rednder' );
	useEffect( () => {
		setLoading( true );
		console.log( 'useEfect' );
		fetch( '/api/items' )
			.then( ( res ) => res.json() )
			.then( ( data: TItems ) => {
				setItems( data );
				setLoading( false );
			} );
	}, [] );

	const addItem = async ( item: IItemToAdd ) => {
		const data = await postRequest( item );
		setItems( data );
		return data;
	};

	const changeItem = async ( item: IItem ) => {
		const data = await putRequest( item );
		setItems( data );
		return data;
	};

	const handleFormSubmit = ( item: IFormData ) => {
		addItem( {...item, state: pages[page]} );
		setFormDisplayed( false );
	};

	const handlePageChange = ( increment: number ) => {
		if ( page + increment > 2 || page + increment < 0 ) return;
		setPage( page+increment );
	};

	const handleItemTap = async ( {...item}: IItem ) => {
		console.log( 'handleTap: ' + JSON.stringify( item ) );
		if ( item.count === 1 ) {
			console.log( 'handleTap: item.count === 1' );
			item.state = returnNext( item.state );
			changeItem( item );
		} else if ( item.state === 'toBuy' ) {
			console.log( 'handleTap: item.state === toBuy' );
			item.state = 'inFridge';
			changeItem( item );
		} else {
			console.log( 'handleTap: else' );
			let {name, expire, count, category, state}: IItemToAdd = {...item};
			let oldItem = {...item};
			count = 1;
			state = returnNext( state );
			await addItem( {name, expire, count, category, state} );
			console.log( oldItem.count );
			oldItem.count -= 1;
			console.log( oldItem.count );
			await changeItem( oldItem );
			console.log( 'handleTap: newItem: count: ' + count + ' oldItem: ' + JSON.stringify( oldItem ) );
		}
	};

	const handleItemDoubleTap = ( {...item}: IItem ) => {
		if ( item.count === 1 ) {
			item.state = returnPrev( item.state );
			changeItem( item );
		} else {
			let {name, expire, count, category, state} = {...item};
			count = 1;
			state = returnPrev( state );
			addItem( {name, expire, count, category, state} );
			item.count -= 1;
			changeItem( item );
		}
	};

	const displayForm = () => {
		setFormDisplayed( true );
	};

	// TODO vytvorit funkci ktera bude slucovat stejne polozky do jedne vetsi

	if ( isLoading || !items ) return <p>isLoading</p>;
  
	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel= "icon" href="/favicon.ico" />
			</Head>
			<div>
				<Nav page={pages[page]}/>
				<FormComponent handleFormSubmit={handleFormSubmit} isDisplayed={formIsDisplayed}/>
				<ItemsList items={items.filter( ( item: IItem ) => belongsToPage( item.state, pages[page] ) )} handleItemTap={handleItemTap} handleItemDoubleTap={handleItemDoubleTap} />
				<BottomBar handlePageChange={handlePageChange} handleFormOpen={displayForm} />
			</div>
		</>
	);
}
