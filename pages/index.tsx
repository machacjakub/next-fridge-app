import Head from 'next/head'
import { useEffect, useState } from 'react'
import BottomBar from '../components/Layout/BottomBar'
import { FormComponent } from '../components/Form/FormComponent'
import { ItemsList } from '../components/ItemList/ItemsList'
import { Nav } from '../components/Layout/Nav'
import { IFormData, IItem, TItems, TState } from './types'

export default function Home() {
  console.log('Homepage renders')
  const [data, setData] = useState<TItems|null>(null)
  const [page, setPage] = useState<number>(1)
  const [isLoading, setLoading] = useState(false)
  const [formIsDisplayed, setFormDisplayed] = useState<boolean>(false)
  const pages = ['toBuy', 'inFridge', 'deleted']
  const handlePageChange = (x: number) => {
    if(page + x > 2 || page + x < 0 ) return;
    setPage(page+x)
  }

  const handleFormSubmit = async ({name, expire, count, category}:IFormData) => {
    try {
      const response = await fetch('/api/items', {
        method: 'POST',
        body: JSON.stringify(
          {
            name: name,
            expire: expire,
            count: count,
            category: category,
            state: pages[1]
          }
        ),
        headers: {
          'Content-Type': 'application/json'
        }
      });
      const datas = await response.json();
      setData(datas);
      setFormDisplayed(false)
    } catch (error) {
      console.error(error);
    }
  }

  const displayForm = () => {
    setFormDisplayed(true);
  }

  useEffect(() => {
    setLoading(true)
    fetch('/api/items')
      .then((res) => res.json())
      .then((data: TItems) => {
        setData(data)
        setLoading(false)
      })
  }, [])
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel= "icon" href="/favicon.ico" />
      </Head>
        <div>
            <Nav page={pages[page]}/>
            <FormComponent handleFormSubmit={handleFormSubmit} isDisplayed={formIsDisplayed}/>
            <ItemsList items={data  ? data.filter((item: IItem) => item.state === pages[page]) : null} />
            <BottomBar handlePageChange={handlePageChange} handleFormOpen={displayForm} />
        </div>
    </>
  )
}
